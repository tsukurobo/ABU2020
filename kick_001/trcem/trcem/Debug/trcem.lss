
trcem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000270  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a7f  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008aa  00000000  00000000  00000e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e5  00000000  00000000  000016e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001acc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045e  00000000  00000000  00001bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000293  00000000  00000000  00002016  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000022a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  88:	0c 94 36 01 	jmp	0x26c	; 0x26c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_3>:
#include "trctwi.hpp"

volatile long count;

ISR(PCINT0_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	af 93       	push	r26
  a0:	bf 93       	push	r27
	if((PINB & (1 << PINB0)) ^ (PIND & (1 << PIND0)))--count;
  a2:	93 b1       	in	r25, 0x03	; 3
  a4:	89 b1       	in	r24, 0x09	; 9
  a6:	89 27       	eor	r24, r25
  a8:	80 ff       	sbrs	r24, 0
  aa:	14 c0       	rjmp	.+40     	; 0xd4 <__vector_3+0x44>
  ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  b4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  b8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	a1 09       	sbc	r26, r1
  c0:	b1 09       	sbc	r27, r1
  c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ca:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
  ce:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
  d2:	13 c0       	rjmp	.+38     	; 0xfa <__vector_3+0x6a>
	else ++count;
  d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  dc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  e0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	a1 1d       	adc	r26, r1
  e8:	b1 1d       	adc	r27, r1
  ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  f2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
  f6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
	
}
  fa:	bf 91       	pop	r27
  fc:	af 91       	pop	r26
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <_Z4initv>:

void init()
{
	count = 0;
 10c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 110:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 114:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 118:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
	
	DDRC = 0x00;
 11c:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00;
 11e:	18 b8       	out	0x08, r1	; 8
	
	DDRD = 0x00;
 120:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x00;
 122:	1b b8       	out	0x0b, r1	; 11
	
	//ピン変化割り込み許可（PCINT0~7）
	PCICR |= (1<<PCIE0);
 124:	e8 e6       	ldi	r30, 0x68	; 104
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	80 83       	st	Z, r24
	//ピン変化割り込み許可（PCINT0）
	PCMSK0 |= (1<<PCINT0);
 12e:	eb e6       	ldi	r30, 0x6B	; 107
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	81 60       	ori	r24, 0x01	; 1
 136:	80 83       	st	Z, r24
 138:	08 95       	ret

0000013a <main>:
}


int main(void)
{
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	1f 92       	push	r1
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
    init();
 144:	0e 94 86 00 	call	0x10c	; 0x10c <_Z4initv>
    sei();
 148:	78 94       	sei
	TRCTWI tr1;
 14a:	ce 01       	movw	r24, r28
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN6TRCTWIC1Ev>
	tr1.initSlaveSender(0x10);
 152:	60 e1       	ldi	r22, 0x10	; 16
 154:	ce 01       	movw	r24, r28
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	0e 94 b8 00 	call	0x170	; 0x170 <_ZN6TRCTWI15initSlaveSenderEh>
    while (1)
    {
	    tr1.slaveSend(count, 8);
 15c:	48 e0       	ldi	r20, 0x08	; 8
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	71 e0       	ldi	r23, 0x01	; 1
 164:	ce 01       	movw	r24, r28
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	0e 94 c3 00 	call	0x186	; 0x186 <_ZN6TRCTWI9slaveSendERVKli>
 16c:	f7 cf       	rjmp	.-18     	; 0x15c <main+0x22>

0000016e <_ZN6TRCTWIC1Ev>:
TRCTWI::TRCTWI()
{
	
}

TRCTWI::~TRCTWI()
 16e:	08 95       	ret

00000170 <_ZN6TRCTWI15initSlaveSenderEh>:

int TRCTWI::initSlaveSender(uint8_t id)
{
	//TWIビット速度レジスタ
	//TWBR = 0xff;
	TWBR = 2;
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWSR = 0x02;
 176:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	
	//TWI(従装置)アドレスレジスタ
	TWAR = (id << 1);
 17a:	66 0f       	add	r22, r22
 17c:	60 93 ba 00 	sts	0x00BA, r22	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	return 0;
}
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	08 95       	ret

00000186 <_ZN6TRCTWI9slaveSendERVKli>:

int TRCTWI::slaveSend(volatile const long &data, int data_byte)
{
 186:	ef 92       	push	r14
 188:	ff 92       	push	r15
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	28 97       	sbiw	r28, 0x08	; 8
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	f8 94       	cli
 19c:	de bf       	out	0x3e, r29	; 62
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	cd bf       	out	0x3d, r28	; 61
		long l;	
		uint8_t u[8];
	};
	
	//TWI制御レジスタ（TWEA:確認応答(ACK)許可 TWEN:TWI動作許可）
	TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN);
 1a2:	84 ec       	ldi	r24, 0xC4	; 196
 1a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	//自宛SLA+R受信まで待機
	while( !(TWCR & (1 << TWINT)));
 1a8:	ec eb       	ldi	r30, 0xBC	; 188
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	88 23       	and	r24, r24
 1b0:	ec f7       	brge	.-6      	; 0x1ac <_ZN6TRCTWI9slaveSendERVKli+0x26>
	
	//自宛SLA+R受信,ACK応答
	if( (TWSR & 0xF8) != ST_SLA_ACK)
 1b2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1b6:	88 7f       	andi	r24, 0xF8	; 248
 1b8:	88 3a       	cpi	r24, 0xA8	; 168
 1ba:	09 f0       	breq	.+2      	; 0x1be <_ZN6TRCTWI9slaveSendERVKli+0x38>
 1bc:	42 c0       	rjmp	.+132    	; 0x242 <_ZN6TRCTWI9slaveSendERVKli+0xbc>
		return -1;
	
	Udata send_data;
	send_data.l = data;
 1be:	fb 01       	movw	r30, r22
 1c0:	80 81       	ld	r24, Z
 1c2:	91 81       	ldd	r25, Z+1	; 0x01
 1c4:	a2 81       	ldd	r26, Z+2	; 0x02
 1c6:	b3 81       	ldd	r27, Z+3	; 0x03
 1c8:	89 83       	std	Y+1, r24	; 0x01
 1ca:	9a 83       	std	Y+2, r25	; 0x02
 1cc:	ab 83       	std	Y+3, r26	; 0x03
 1ce:	bc 83       	std	Y+4, r27	; 0x04
	
	for(int i = 0; i < data_byte - 1; i++) {
 1d0:	ba 01       	movw	r22, r20
 1d2:	61 50       	subi	r22, 0x01	; 1
 1d4:	71 09       	sbc	r23, r1
 1d6:	16 16       	cp	r1, r22
 1d8:	17 06       	cpc	r1, r23
 1da:	ec f4       	brge	.+58     	; 0x216 <_ZN6TRCTWI9slaveSendERVKli+0x90>
 1dc:	ce 01       	movw	r24, r28
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	7c 01       	movw	r14, r24
 1e2:	4c 0f       	add	r20, r28
 1e4:	5d 1f       	adc	r21, r29
		//データバイト送信
		TWDR = send_data.u[i];
 1e6:	0b eb       	ldi	r16, 0xBB	; 187
 1e8:	10 e0       	ldi	r17, 0x00	; 0
		TWCR = (1<<TWINT) | (1 << TWEA) | (1 << TWEN);
 1ea:	ec eb       	ldi	r30, 0xBC	; 188
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	94 ec       	ldi	r25, 0xC4	; 196
		
		//ACK受信待機
		while( !(TWCR & (1<<TWINT)));
		
		//データバイト送信,ACK受信
		if( (TWSR & 0xF8) != ST_DATA_ACK)
 1f0:	29 eb       	ldi	r18, 0xB9	; 185
 1f2:	30 e0       	ldi	r19, 0x00	; 0
	Udata send_data;
	send_data.l = data;
	
	for(int i = 0; i < data_byte - 1; i++) {
		//データバイト送信
		TWDR = send_data.u[i];
 1f4:	d7 01       	movw	r26, r14
 1f6:	8d 91       	ld	r24, X+
 1f8:	7d 01       	movw	r14, r26
 1fa:	d8 01       	movw	r26, r16
 1fc:	8c 93       	st	X, r24
		TWCR = (1<<TWINT) | (1 << TWEA) | (1 << TWEN);
 1fe:	90 83       	st	Z, r25
		
		//ACK受信待機
		while( !(TWCR & (1<<TWINT)));
 200:	80 81       	ld	r24, Z
 202:	88 23       	and	r24, r24
 204:	ec f7       	brge	.-6      	; 0x200 <_ZN6TRCTWI9slaveSendERVKli+0x7a>
		
		//データバイト送信,ACK受信
		if( (TWSR & 0xF8) != ST_DATA_ACK)
 206:	d9 01       	movw	r26, r18
 208:	8c 91       	ld	r24, X
 20a:	88 7f       	andi	r24, 0xF8	; 248
 20c:	88 3b       	cpi	r24, 0xB8	; 184
 20e:	e1 f4       	brne	.+56     	; 0x248 <_ZN6TRCTWI9slaveSendERVKli+0xc2>
		return -1;
	
	Udata send_data;
	send_data.l = data;
	
	for(int i = 0; i < data_byte - 1; i++) {
 210:	e4 16       	cp	r14, r20
 212:	f5 06       	cpc	r15, r21
 214:	79 f7       	brne	.-34     	; 0x1f4 <_ZN6TRCTWI9slaveSendERVKli+0x6e>
			return -2;
			
	}
		
	//最終データバイト送信, NACK待機
	TWDR = send_data.u[data_byte - 1];
 216:	fe 01       	movw	r30, r28
 218:	e6 0f       	add	r30, r22
 21a:	f7 1f       	adc	r31, r23
 21c:	81 81       	ldd	r24, Z+1	; 0x01
 21e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1 << TWEA) |(1 << TWEN);
 222:	84 ec       	ldi	r24, 0xC4	; 196
 224:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	//NACK受信待機
	while( !(TWCR & (1<<TWINT)));
 228:	ec eb       	ldi	r30, 0xBC	; 188
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	88 23       	and	r24, r24
 230:	ec f7       	brge	.-6      	; 0x22c <_ZN6TRCTWI9slaveSendERVKli+0xa6>
	
	//最終データバイト送信,NACK受信
	if( (TWSR & 0xF8) != ST_DATA_NACK)
 232:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 236:	88 7f       	andi	r24, 0xF8	; 248
 238:	80 3c       	cpi	r24, 0xC0	; 192
 23a:	49 f4       	brne	.+18     	; 0x24e <_ZN6TRCTWI9slaveSendERVKli+0xc8>
		return -2;
	
	//正常終了
	return 0;
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	08 c0       	rjmp	.+16     	; 0x252 <_ZN6TRCTWI9slaveSendERVKli+0xcc>
	//自宛SLA+R受信まで待機
	while( !(TWCR & (1 << TWINT)));
	
	//自宛SLA+R受信,ACK応答
	if( (TWSR & 0xF8) != ST_SLA_ACK)
		return -1;
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	9f ef       	ldi	r25, 0xFF	; 255
 246:	05 c0       	rjmp	.+10     	; 0x252 <_ZN6TRCTWI9slaveSendERVKli+0xcc>
		//ACK受信待機
		while( !(TWCR & (1<<TWINT)));
		
		//データバイト送信,ACK受信
		if( (TWSR & 0xF8) != ST_DATA_ACK)
			return -2;
 248:	8e ef       	ldi	r24, 0xFE	; 254
 24a:	9f ef       	ldi	r25, 0xFF	; 255
 24c:	02 c0       	rjmp	.+4      	; 0x252 <_ZN6TRCTWI9slaveSendERVKli+0xcc>
	//NACK受信待機
	while( !(TWCR & (1<<TWINT)));
	
	//最終データバイト送信,NACK受信
	if( (TWSR & 0xF8) != ST_DATA_NACK)
		return -2;
 24e:	8e ef       	ldi	r24, 0xFE	; 254
 250:	9f ef       	ldi	r25, 0xFF	; 255
	
	//正常終了
	return 0;
 252:	28 96       	adiw	r28, 0x08	; 8
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	f8 94       	cli
 258:	de bf       	out	0x3e, r29	; 62
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	cd bf       	out	0x3d, r28	; 61
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	1f 91       	pop	r17
 264:	0f 91       	pop	r16
 266:	ff 90       	pop	r15
 268:	ef 90       	pop	r14
 26a:	08 95       	ret

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
